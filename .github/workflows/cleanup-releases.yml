jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cleanup script
        uses: actions/checkout@v4

      - name: Run cleanup inline
        run: |
          pip install PyGithub
          python3 - <<'EOF'
          import os
          import argparse
          from datetime import datetime, timedelta
          from github import Github

          parser = argparse.ArgumentParser()
          parser.add_argument('--days', type=int, default=90)
          parser.add_argument('--keep', type=int, default=5)
          args = parser.parse_args()

          token = os.environ["GITHUB_TOKEN"]
          repo_name = os.environ["GITHUB_REPOSITORY"]

          g = Github(token)
          repo = g.get_repo(repo_name)
          releases = list(repo.get_releases())
          releases.sort(key=lambda r: r.created_at, reverse=True)

          cutoff = datetime.utcnow() - timedelta(days=args.days)
          to_delete = []

          for idx, release in enumerate(releases):
              if idx < args.keep:
                  continue
              if release.created_at >= cutoff:
                  continue
              to_delete.append(release)

          print(f"Found {len(to_delete)} releases to delete.")
          for release in to_delete:
              print(f"Deleting release: {release.title} ({release.tag_name})")
              release.delete_release()
              try:
                  ref = repo.get_git_ref(f"tags/{release.tag_name}")
                  ref.delete()
                  print(f"Deleted tag: {release.tag_name}")
              except Exception as e:
                  print(f"Tag not found or already deleted: {release.tag_name}")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

