name: Cleanup Old Releases

on:
  workflow_call:
    inputs:
      days-to-keep:
        required: false
        default: '0'
        type: string
      min-releases-to-keep:
        required: false
        default: '5'
        type: string
    secrets:
      GH_TOKEN:
        required: true

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Run cleanup inline
        run: |
          pip install PyGithub
          python3 - <<'EOF'
          import os
          import warnings
          from datetime import datetime, timedelta, timezone
          from github import Github

          warnings.filterwarnings("ignore", category=DeprecationWarning)

          days = int(os.environ.get("DAYS_TO_KEEP", "90"))
          keep = int(os.environ.get("MIN_RELEASES_TO_KEEP", "5"))

          token = os.environ["GITHUB_TOKEN"]
          repo_name = os.environ["GITHUB_REPOSITORY"]

          g = Github(token)
          repo = g.get_repo(repo_name)
          releases = list(repo.get_releases())
          releases.sort(key=lambda r: r.created_at, reverse=True)

          cutoff = datetime.now(timezone.utc) - timedelta(days=days)

          print(f"🧹 Total releases found: {len(releases)}")
          print(f"🛡️ Keeping the {keep} most recent releases, regardless of age.")
          print(f"🕒 Deleting any older than: {cutoff.isoformat()}")

          to_delete = []
          for idx, release in enumerate(releases):
              if idx < keep:
                  print(f"✅ KEEP (recent): {release.title} ({release.tag_name})")
                  continue
              if release.created_at >= cutoff:
                  print(f"✅ KEEP (fresh):  {release.title} ({release.tag_name})")
                  continue
              print(f"🗑️ DELETE: {release.title} ({release.tag_name})")
              to_delete.append(release)

          print(f"🔎 Total to delete: {len(to_delete)}")
          for release in to_delete:
              release.delete_release()
              try:
                  ref = repo.get_git_ref(f"tags/{release.tag_name}")
                  ref.delete()
                  print(f"🗑️ Deleted tag: {release.tag_name}")
              except Exception:
                  print(f"⚠️ Tag not found or already deleted: {release.tag_name}")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          DAYS_TO_KEEP: ${{ inputs.days-to-keep }}
          MIN_RELEASES_TO_KEEP: ${{ inputs.min-releases-to-keep }}

